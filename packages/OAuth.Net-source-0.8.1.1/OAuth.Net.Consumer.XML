<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OAuth.Net.Consumer</name>
    </assembly>
    <members>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService)">
            <summary>
            Creates a new OAuth protected request configured for an ASP.NET context, 
            with the current URL as the callback URL and the current user or session id
            used as a state key.
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <returns>An OAuth protected request for the protected resource,
            configured for an ASP.NET context</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri)">
            <summary>
            Creates a new OAuth protected request configured for an ASP.NET context, 
            with the the current user or session id used as a state key.
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback URI</param>
            <returns>An OAuth protected request for the protected resource,
            configured for an ASP.NET context</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri,System.String)">
            <summary>
            Creates a new OAuth protected request configured for an ASP.NET context.
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback URI</param>
            <param name="endUserId">End user ID</param>
            <returns>An OAuth protected request for the protected resource,
            configured for an ASP.NET context</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.HandleVerification(System.Object,OAuth.Net.Consumer.AuthorizationVerificationEventArgs)">
            <summary>
            Handles verification for an OAuthRequest in an ASP.NET scenario.
            </summary>
            <param name="sender">OAuthRequest</param>
            <param name="args">Authorization args</param>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.HandleAuthorization(System.Object,OAuth.Net.Consumer.AuthorizationEventArgs)">
            <summary>
            Handles authorization for an OAuthRequest in an ASP.NET scenario.
            </summary>
            <param name="sender">OAuthRequest</param>
            <param name="args">Authorization args</param>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.GetEndUserIdFromHttpContextUser">
            <summary>
            Gets the end user id for the current user stored in the 
            HTTP context, if present.
            </summary>
            <returns>End user id, or <c>null</c></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.AspNetOAuthRequest.GetEndUserIdFromHttpSession">
            <summary>
            Gets the current session id as the end user id, if a session is 
            present.
            </summary>
            <returns>End user id, or <c>null</c></returns>
        </member>
        <member name="T:OAuth.Net.Consumer.OAuthResponse">
            <summary>
            An OAuthResponse is returned when making a request for an OAuthResource
            from an OAuthService provider.  The response will also contain a Token 
            which will either by a RequestToken or AccessToken.  If the service
            has returned the resource in the response then the ProtectedResource
            will contain the OAuthResource requested.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthResponse.Token">
            <summary>
            The token associated with the resource.  In the first stage 
            of the request this will return a RequestToken.  When an OAuthResource
            is succesfully return it will be the AccessToken which can be used for
            further requests.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthResponse.HasProtectedResource">
            <summary>
            Returns true if the Response contains the requested OAuthResource        
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthResponse.ProtectedResource">
            <summary>
            Returns the OAuthResource requested from the OAuthService 
            if the request was succesfull or null.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.PreRequestEventArgs">
            <summary>
            The event arguments used for events that fire before a request is sent.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.PreRequestEventArgs.#ctor(System.Uri,System.String,System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates event arguments with the corresponding request Uri, HTTP method and parameter collection.
            </summary>
            <param name="requestUri">Request Uri</param>
            <param name="httpMethod">HTTP method</param>
            <param name="parameters">Additional parameters</param>
        </member>
        <member name="P:OAuth.Net.Consumer.PreRequestEventArgs.RequestUri">
            <summary>
            The Uri of the request to be sent.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreRequestEventArgs.HttpMethod">
            <summary>
            The HTTP method of the request to be sent
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreRequestEventArgs.CallbackUrl">
            <summary>
            The URL that the service provider will return the user to after 
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreRequestEventArgs.AdditionalParameters">
            <summary>
            A name value collection of parameters that will be applied to the
            request before it is sent.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs">
            <summary>
            Event arguments for the OnBeforeGetProtectedResource event.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.#ctor(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,OAuth.Net.Common.IToken,OAuth.Net.Common.IToken)">
            <summary>
            Creates event arguments with the corresponding request Uri, HTTP method,parameter collection,
            request token and access token.
            </summary>
            <param name="requestUri">Request Uri</param>
            <param name="httpMethod">HTTP method</param>
            <param name="parameters">Additional parameters</param>
            <param name="requestToken">Request token</param>
            <param name="accessToken">Access token</param>
        </member>
        <member name="P:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.RequestUri">
            <summary>
            The Uri of the request to be sent.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.HttpMethod">
            <summary>
            The HTTP method of the request to be sent
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.AdditionalParameters">
            <summary>
            A name value collection of parameters that will be applied to the
            request before it is sent.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.RequestToken">
            <summary>
            The request token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreProtectedResourceRequestEventArgs.AccessToken">
            <summary>
            The access token
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.OAuthService">
            <summary>
            An OAuthService encapsulates protocol information about a set of OAuth endpoints.
            </summary>
            
            <remarks>
            <para>An OAuthService contains the following protocol information:</para>
            
            <list type="bullet">
            <item><description>The URL for obtaining Request Tokens</description></item>
            <item><description>The URL to send users to for authorization</description></item>
            <item><description>The URL for obtaining Access Tokens</description></item>
            <item><description>The HTTP method to use (GET or POST)</description></item>
            <item><description>Whether Authorization HTTP headers should be used</description></item>
            <item><description>The authorization Realm</description></item>
            <item><description>The signature method to use</description></item>
            <item><description>The OAuth specification version</description></item>
            <item><description>The consumer details (key and secret)</description></item>
            </list>
            
            <para>In future, it should be possible to perform automatic discovery of
            the protocol information (a discovery specification is being worked on), but
            for now this information must be supplied.</para>
            </remarks>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,OAuth.Net.Common.IConsumer)">
            <summary>
            Creates an OAuthService using defaults for most parameters, loading components
            from the current global service locator.
            </summary>
            <remarks>
            <para>The OAuthService created will have the following defaults:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>    
                    <description>Value</description>
                </listheader>
                <item>
                    <term>HttpMethod</term>
                    <description><c>"POST"</c></description>
                </item>
                <item>
                    <term>UseAuthorizationHeader</term>
                    <description><c>true</c></description>
                </item>
                <item>
                    <term>Realm</term>
                    <description><c>null</c></description>
                </item>
                <item>
                    <term>SignatureMethod</term>
                    <description><c>"HMAC-SHA1"</c></description>
                </item>
                <item>
                    <term>OAuthVersion</term>
                    <description><c>"1.0"</c></description>
                </item>
                <item>
                    <term>ConfigSection</term>
                    <description><c>"oauth.net.consumer"</c></description>
                </item>
            </list>
            </remarks>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>
            <param name="consumer">Consumer credentials</param>
            <returns>An OAuthService</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,OAuth.Net.Common.IConsumer,Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Creates an OAuthService using defaults for most parameters, loading components
            from the service locator provided by the supplied provider.
            </summary>
            <remarks>
            <para>The OAuthService created will have the following defaults:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>    
                    <description>Value</description>
                </listheader>
                <item>
                    <term>HttpMethod</term>
                    <description><c>"POST"</c></description>
                </item>
                <item>
                    <term>UseAuthorizationHeader</term>
                    <description><c>true</c></description>
                </item>
                <item>
                    <term>Realm</term>
                    <description><c>null</c></description>
                </item>
                <item>
                    <term>SignatureMethod</term>
                    <description><c>"HMAC-SHA1"</c></description>
                </item>
                <item>
                    <term>OAuthVersion</term>
                    <description><c>"1.0"</c></description>
                </item>
            </list>
            </remarks>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>
            <param name="consumer">Consumer credentials</param>
            <param name="serviceLocatorProvider">Service locator provider which provides a service locator for components</param>
            <returns>An OAuthService</returns>        
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,System.String,OAuth.Net.Common.IConsumer)">
            <summary>
            Creates an OAuthService using defaults for most parameters, loading components
            from the current global service locator.
            </summary>
            <remarks>
            <para>The OAuthService created will have the following defaults:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>    
                    <description>Value</description>
                </listheader>
                <item>
                    <term>HttpMethod</term>
                    <description><c>"POST"</c></description>
                </item>
                <item>
                    <term>UseAuthorizationHeader</term>
                    <description><c>true</c></description>
                </item>
                <item>
                    <term>Realm</term>
                    <description><c>null</c></description>
                </item>
                <item>
                    <term>OAuthVersion</term>
                    <description><c>"1.0"</c></description>
                </item>
                <item>
                    <term>ConfigSection</term>
                    <description><c>"oauth.net.consumer"</c></description>
                </item>
            </list>
            </remarks>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>
            <param name="signatureMethod">Signature method to use</param>
            <param name="consumer">Consumer credentials</param>
            <returns>An OAuthService</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,System.String,OAuth.Net.Common.IConsumer,Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Creates an OAuthService using defaults for most parameters, loading components
            from the service locator provided by the supplied provider.
            </summary>
            <remarks>
            <para>The OAuthService created will have the following defaults:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>    
                    <description>Value</description>
                </listheader>
                <item>
                    <term>HttpMethod</term>
                    <description><c>"POST"</c></description>
                </item>
                <item>
                    <term>UseAuthorizationHeader</term>
                    <description><c>true</c></description>
                </item>
                <item>
                    <term>Realm</term>
                    <description><c>null</c></description>
                </item>
                <item>
                    <term>OAuthVersion</term>
                    <description><c>"1.0"</c></description>
                </item>
            </list>
            </remarks>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>
            <param name="signatureMethod">Signature method to use</param>
            <param name="consumer">Consumer credentials</param>
            <param name="serviceLocatorProvider">Service locator provider which provides 
            a service locator for components</param>
            <returns>An OAuthService</returns>        
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,System.Boolean,System.String,System.String,System.String,OAuth.Net.Common.IConsumer)">
            <summary>
            Creates an OAuthService, with each parameter specified, loading components
            from the current global service locator.
            </summary>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>        
            <param name="useAuthorizationHeader">Whether to use HTTP Authorization headers</param>
            <param name="realm">HTTP authorization realm</param>
            <param name="signatureMethod">Signature method to use</param>
            <param name="oauthVersion">OAuth specification version</param>
            <param name="consumer">Consumer credentials</param>
            <returns>An OAuthService</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Create(OAuth.Net.Consumer.EndPoint,System.Uri,OAuth.Net.Consumer.EndPoint,System.Boolean,System.String,System.String,System.String,OAuth.Net.Common.IConsumer,Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Creates an OAuthService, with each parameter specified, loading components
            from the service locator provided by the supplied provider.
            </summary>
            <param name="requestTokenEndPoint">EndPoint for obtaining request tokens</param>
            <param name="authorizationUrl">URL to send users to for authorization</param>
            <param name="accessTokenEndPoint">EndPoint for obtaining access tokens</param>        
            <param name="useAuthorizationHeader">Whether to use HTTP Authorization headers</param>
            <param name="realm">HTTP authorization realm</param>
            <param name="signatureMethod">Signature method to use</param>
            <param name="oauthVersion">OAuth specification version</param>
            <param name="consumer">Consumer credentials</param>
            <param name="serviceLocatorProvider">Service locator provider which provides a service locator for components</param>
            <returns>An OAuthService</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.op_Equality(OAuth.Net.Consumer.OAuthService,OAuth.Net.Consumer.OAuthService)">
            <summary>
            Checks if two OAuthServices are equal
            </summary>
            <param name="left">Left-hand-side OAuthService</param>
            <param name="right">Right-hand-side OAuthService</param>
            <returns><c>true</c>, if they are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.op_Inequality(OAuth.Net.Consumer.OAuthService,OAuth.Net.Consumer.OAuthService)">
            <summary>
            Checks if two OAuthServices are not equal
            </summary>
            <param name="left">Left-hand-side OAuthService</param>
            <param name="right">Right-hand-side OAuthService</param>
            <returns><c>true</c>, if they are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.BuildAuthorizationUrl(OAuth.Net.Common.IToken)">
            <summary>
            Builds the authorization URL to send a user to for a particular request token.  As no callback
            URL is defined calling this method will force the OAuth Callback to be out-of-band.
            </summary>
            <remarks>
            If an <see cref="T:OAuth.Net.Consumer.OAuthRequest"/> requires authorization, the URL to send the user
            to should be built by calling this method, passing in the 
            <see cref="P:OAuth.Net.Consumer.OAuthRequest.RequestToken"/> value.
            </remarks>
            <param name="token">Request token that requires authorization</param>        
            <returns>The Uri to send the user to (with the OAuth token parameters encoded)</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.BuildAuthorizationUrl(OAuth.Net.Common.IToken,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds the authorization URL to send a user to for a particular request token, 
            including the additional parameters supplied and the URI for the service provider 
            to return the user to.
            </summary>
            <remarks>
            If an <see cref="T:OAuth.Net.Consumer.OAuthRequest"/> requires authorization, the URL to send the user
            to should be built by calling this method, passing in the 
            <see cref="P:OAuth.Net.Consumer.OAuthRequest.RequestToken"/> value.
            </remarks>
            <param name="token">Request token that requires authorization</param>        
            <param name="additionalParameters">Additional parameters to add to the query 
            string</param>
            <returns>The Uri to send the user to (with callback URL &amp; additional parameters 
            added and the OAuth token parameters encoded)</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.GetHashCode">
            <summary>
            Gets a hash code for the OAuthService.
            </summary>
            <returns>A hash code, computed from the hash codes of the properties</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Equals(System.Object)">
            <summary>
            Checks whether the supplied object is equal to this OAuthService object.
            </summary>
            <remarks>OAuthServices are compared property by property.</remarks>
            <param name="obj">Object</param>
            <returns><c>true</c> if the objects' properties have the same values;
            <c>false</c> otherwise</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthService.Equals(OAuth.Net.Consumer.OAuthService)">
            <summary>
            Checks whether the supplied OAuthService is equal to this OAuthService object.
            </summary>
            <remarks>OAuthServices are compared property by property (excluding 
            ComponentLocator).</remarks>
            <param name="other">Other OAuthService</param>
            <returns><c>true</c> if the OAuthServices' properties have the same values;
            <c>false</c> otherwise</returns>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.ComponentLocator">
            <summary>
            The component locator provides component instances for this service.
            These components are defined in the config section associated with
            this service.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.RequestTokenEndPoint">
            <summary>
            The EndPoint for obtaining request tokens
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.RequestTokenUrl">
            <summary>
            The URL for obtaining request tokens
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.AuthorizationUrl">
            <summary>
            The URL to send users to for authorization
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.AccessTokenEndPoint">
            <summary>
            The EndPoint for obtaining access tokens
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.AccessTokenUrl">
            <summary>
            The URL for obtaining access tokens
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.UseAuthorizationHeader">
            <summary>
            Whether to use HTTP Authorization headers (or query string / post body instead)
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.Realm">
            <summary>
            The HTTP authorization realm
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.SignatureMethod">
            <summary>
            The signature method to use
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.OAuthVersion">
            <summary>
            The OAuth specification version
            </summary>
            <value>Must be <c>1.0</c></value>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthService.Consumer">
            <summary>
            The consumer credentials
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs">
            <summary>
            The event arguments used for the event which fires before an access token is requested
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs.#ctor(System.Uri,System.String,OAuth.Net.Common.IToken,System.String)">
            <summary>
            Creates event arguments with the corresponding request Uri, HTTP method and request token.
            </summary>
            <param name="requestUri">Request Uri</param>
            <param name="httpMethod">HTTP method</param>
            <param name="requestToken">Request token</param>
        </member>
        <member name="P:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs.RequestUri">
            <summary>
            The Uri of the request to be sent.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs.HttpMethod">
            <summary>
            The HTTP method of the request to be sent
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs.RequestToken">
            <summary>
            The request token.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.PreAccessTokenRequestEventArgs.Verifier">
            <summary>
            The verifier generated by the service provider on authorization of a request token by a user
            that the consumer must return when requesting an access token.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.IRequestStateStore.Store(OAuth.Net.Consumer.RequestState)">
            <summary>
            Stores the specified request <paramref name="state"/>, overriding 
            any previous state with the same key
            </summary>
            <param name="state">Request state</param>
        </member>
        <member name="M:OAuth.Net.Consumer.IRequestStateStore.Get(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Gets the request state stored for the specified <paramref name="key"/>,
            creating a new state object if none is stored.
            </summary>
            <param name="key">State key</param>
            <returns>State</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.IRequestStateStore.Delete(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Permanently removes any state stored for the specified <paramref name="key"/>
            </summary>
            <param name="key">State key</param>
        </member>
        <member name="T:OAuth.Net.Consumer.RequestTokenReceivedEventArgs">
            <summary>
            The event arguments sent when a request token is received.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.RequestTokenReceivedEventArgs.#ctor(OAuth.Net.Common.IToken,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates event arguments with the corresponding request token and parameter collection.
            </summary>
            <param name="requestToken">Request token</param>
            <param name="additionalParameters">Parameter collection</param>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestTokenReceivedEventArgs.RequestToken">
            <summary>
            The request token issued by the service provider
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestTokenReceivedEventArgs.AdditionalParameters">
            <summary>
            Any non-OAuth parameters returned by the service provider
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.AuthorizationVerificationEventArgs.#ctor">
            <summary>
            Creates event arguments for the Provide Verifier Handler.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.AuthorizationVerificationEventArgs.Verifier">
            <summary>
            The verifier issued by the service provider during authorization.
            You should set this to the verifier received.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.InMemoryRequestStateStore.Store(OAuth.Net.Consumer.RequestState)">
            <summary>
            Stores the specified request <paramref name="state"/>, overriding 
            any previous state with the same key
            </summary>
            <param name="state">Request state</param>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.InMemoryRequestStateStore.Get(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Gets the request state stored for the specified <paramref name="key"/>,
            creating a new state object if none is stored.
            </summary>
            <param name="key">State key</param>
            <returns>State</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.InMemoryRequestStateStore.Delete(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Permanently removes any state stored for the specified <paramref name="key"/>
            </summary>
            <param name="key">State key</param>
        </member>
        <member name="M:OAuth.Net.Consumer.RequestState.#ctor(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Constructs a request state object using the specified
            request state key. The key identifies the service realm and request
            to which the state pertains.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestState.Key">
            <summary>
            The key that identifies the service realm and request to which
            this state pertains.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestState.RequestToken">
            <summary>
            The request token for this request flow, if applicable.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestState.AccessToken">
            <summary>
            The access token for this request flow, if applicable.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.AuthorizationEventArgs">
            <summary>
            Authorization handler arguments
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.AuthorizationEventArgs.#ctor(OAuth.Net.Common.IToken)">
            <summary>
            Creates event arguments for the Authorization Handler.
            </summary>
            <param name="requestToken">Request Token</param>
        </member>
        <member name="P:OAuth.Net.Consumer.AuthorizationEventArgs.RequestToken">
            <summary>
            The request token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.AuthorizationEventArgs.ContinueOnReturn">
            <summary>
            Whether the OAuth request workflow can continue when the handler returns.
            Defaults to false as the standard workflow is to return the RequestToken
            ready for authorization.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.EndPoint">
            <summary>
            Represent an Uri and HttpMethod that define the EndPoint in the OAuth dance.  This could either
            be the protected resource, or the oauth request and token end points.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.#ctor(System.String)">
            <summary>
            Constructs and EndPoint instance using the HTTP GET method for the 
            supplied uri
            </summary>
            <param name="uri">An absolute Uri</param>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.#ctor(System.Uri)">
            <summary>
            Constructs and EndPoint instance using the HTTP GET method for the 
            supplied uri
            </summary>
            <param name="uri">An absolute Uri</param>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.#ctor(System.String,System.String)">
            <summary>
            Constructs and EndPoint instance.
            </summary>
            <param name="uri">An absolute Uri</param>
            <param name="httpMethod">GET, POST, DELETE or PUT</param>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.#ctor(System.Uri,System.String)">
            <summary>
            Constructs and EndPoint instance.
            </summary>
            <param name="uri">An absolute Uri</param>
            <param name="httpMethod">GET, POST, DELETE or PUT</param>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.op_Equality(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.EndPoint)">
            <summary>
            Checks if two EndPoints are equal
            </summary>
            <param name="left">Left-hand-side EndPoint</param>
            <param name="right">Right-hand-side EndPoint</param>
            <returns><c>true</c>, if they are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.EndPoint.op_Inequality(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.EndPoint)">
            <summary>
            Checks if two OAuthServices are not equal
            </summary>
            <param name="left">Left-hand-side EndPoint</param>
            <param name="right">Right-hand-side EndPoint</param>
            <returns><c>true</c>, if they are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="P:OAuth.Net.Consumer.EndPoint.Uri">
            <summary>
            The absolute Uri of the OAuth Endpoint.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.EndPoint.HttpMethod">
            <summary>
            The HttpMethod to access this end point.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.OAuthConsumerRequest">
            <summary>
            Makes an OAuth Consumer request for a resource without an access token.
            <see href="http://oauth.googlecode.com/svn/spec/ext/consumer_request/1.0/drafts/1/spec.html"/>
            
            A method for using the OAuth flow to sign a request made between a Consumer and Service Provider where no User is involved. 
            This enables OAuth to be used as a replacement to HTTP Basic authentication, which is not as complex as HTTP Digest authentication, 
            and extends the capabilities of the OAuth Consumer credentials. 
            
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthConsumerRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService)">
            <summary>
            Creates a new OAuth protected requests.
            </summary>
            <remarks>
            Since neither a request token nor an access token is supplied,
            the user will have to authorize this request.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <returns>An OAuth protected request for the protected resource</returns>
        </member>
        <member name="T:OAuth.Net.Consumer.Components.SessionRequestStateStore">
            <summary>
            HttpSessionState backed implementation of IRequestStateStore
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.SessionRequestStateStore.Store(OAuth.Net.Consumer.RequestState)">
            <summary>
            Stores the specified request <paramref name="state"/>, overriding 
            any previous state with the same key
            </summary>
            <param name="state">Request state</param>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.SessionRequestStateStore.Get(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Gets the request state stored for the specified <paramref name="key"/>,
            creating a new state object if none is stored.
            </summary>
            <param name="key">State key</param>
            <returns>State</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.Components.SessionRequestStateStore.Delete(OAuth.Net.Consumer.RequestStateKey)">
            <summary>
            Permanently removes any state stored for the specified <paramref name="key"/>
            </summary>
            <param name="key">State key</param>
        </member>
        <member name="M:OAuth.Net.Consumer.RequestStateKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a request state key from a service realm, consumer key, and
            an end user id
            </summary>
            <param name="serviceRealm">Service realm</param>
            <param name="consumerKey">Consumer key</param>
            <param name="endUserId">End user identifier</param>
        </member>
        <member name="M:OAuth.Net.Consumer.RequestStateKey.#ctor(OAuth.Net.Consumer.OAuthService,System.String)">
            <summary>
            Constructs a request state key from a service and
            an end user id. The service realm is taken to be the OAuthService.Realm
            property or else the OAuthService.AuthorizationUri if the realm is null. 
            The consumer key is loaded from the service
            </summary>
            <param name="service">Service</param>
            <param name="endUserId">End user identifier</param>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestStateKey.ServiceRealm">
            <summary>
            The service realm this state applies to. This could be a HTTP Authorization
            Realm as per RFC 2616, or some other identifier for a service.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestStateKey.ConsumerKey">
            <summary>
            The consumer key this state applies to.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.RequestStateKey.EndUserId">
            <summary>
            An identifier for the end user this state applies to.
            </summary>
        </member>
        <member name="T:OAuth.Net.Consumer.OAuthRequest">
            <summary>
            Makes a request to an OAuth protected resource.
            </summary>
            <remarks>
            <para>
            To create an <see cref="T:OAuth.Net.Consumer.OAuthRequest"/>, use the Create 
            methods. You should pass a configured <see cref="T:OAuth.Net.Consumer.OAuthService"/> which
            encapsulated the protocol configuration details.
            </para>
            
            <para>
            When constructing an <see cref="T:OAuth.Net.Consumer.OAuthRequest"/>, you should pass the 
            request and/or access tokens if you have already performed user 
            authorization.
            </para>
            
            <para>
            If a valid access token is supplied, this token will be used to request
            the protected resource when GetResource is called and the
            returned <see cref="T:OAuth.Net.Consumer.OAuthResponse"/> should contain the resource 
            representation as an <see cref="T:OAuth.Net.Common.OAuthResource"/>. If not, 
            <see cref="P:OAuth.Net.Consumer.OAuthResponse.HasProtectedResource"/> will be <c>false</c>.
            </para>
            
            <para>
            If no access token is supplied, but an authorized request token is 
            passed, calling GetResource will first request an access
            token. If successful, the protected resource request will then proceed.
            The returned <see cref="T:OAuth.Net.Consumer.OAuthResponse"/> will contain the access token
            obtained in its <see cref="P:OAuth.Net.Consumer.OAuthResponse.Token"/> property and the
            resource representation as a <see cref="T:OAuth.Net.Common.OAuthResource"/>. 
            <see cref="P:OAuth.Net.Consumer.OAuthResponse.HasProtectedResource"/> will be <c>true</c>.
            </para>
            
            <para>
            If no tokens are supplied at all, or if the request token supplied is
            not authenticated (and no access token is supplied), then the user will
            be directed to perform authorization of the request. The 
            <see cref="P:OAuth.Net.Consumer.OAuthResponse.HasProtectedResource"/> property will be 
            <c>false</c>. If a request token has been obtained, it will be stored 
            in the <see cref="P:OAuth.Net.Consumer.OAuthResponse.Token"/> property. You should direct the
            user to the authorization URL as generated by 
            OAuthService.BuildAuthorizationUrl (passing in the request 
            token and optionally a callback URL and/or additional parameters). Once
            the user has completed the authorization step, you should re-submit the
            <see cref="T:OAuth.Net.Consumer.OAuthRequest"/> with the now authenticated response token
            and proceed as above.
            </para>
            
            <para>
            If the service provider supports the Problem Reporting extension and
            an error occurs, a report will be thrown as a 
            <see cref="T:OAuth.Net.Common.OAuthRequestException"/>. You should use this to inform your
            response to this error.
            </para>
            
            <example>
            The following example is taken from the article, 
            <see href="http://lab.madgex.com/oauth-net/gettingatarted01.aspx/">
            Getting Started: Building a Fire Eagle consumer with OAuth.net</see>.
            
            <code>
            // Find the user's location
            var request = OAuthRequest.Create(
                new Uri("https://fireeagle.yahooapis.com/api/0.1/user"),
                FireEagle.GetService,
                context.Session["request_token"] as IToken,
                context.Session["access_token"] as IToken);
            OAuthResponse response = request.GetResource();
            
            if (response.HasProtectedResource)
            {
                // Store the access token
                context.Session["access_token"] = response.Token;
             
             
                // Load the response XML
                XmlDocument responseXml = new XmlDocument();
                responseXml.Load(response.ProtectedResource.GetResponseStream());
             
             
                // Check the response status
                if (responseXml.SelectSingleNode("rsp/@stat").Value == "ok")
             
                    return Location.Parse(responseXml.SelectSingleNode(
                        "rsp/user/location-hierarchy/location[@best-guess='true']"));
                else
                    return null;
            }
            else
            {
                // Authorization is required
                context.Session["request_token"] = response.Token;
                throw new AuthorizationRequiredException()
                {
                    AuthorizationUri = FireEagle.GetService.BuildAuthorizationUrl(
                        response.Token, 
                        callback)
                };
            }
            </code>
            </example>
            
            </remarks>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri,System.String,System.String)">
            <summary>
            Creates a new OAuth protected request, using the supplied end user ID
            in combination with the service to create a state key to load and 
            store request state such as tokens.
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback URI</param>
            <param name="endUserId">End user ID</param>
            <param name="verifier">Verifier</param>
            <returns>An OAuth protected request for the protected resource,
            initialised using the configured state store</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService)">
            <summary>
            Creates a new OAuth protected requests.
            </summary>
            <remarks>
            Since neither a request token nor an access token is supplied,
            the user will have to authorize this request.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <returns>An OAuth protected request for the protected resource</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,OAuth.Net.Common.IToken)">
            <summary>
            Creates a new OAuth protected request, initialised with a previously
            retrieved request token. This token may or may not have been authorized.
            </summary>
            <remarks>
            If the request token supplied has not been authorized, the user will
            have to be directed to authorize it before the request can proceed.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="requestToken">Request token</param>
            <returns>An OAuth protected request for the protected resource</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,OAuth.Net.Common.IToken,OAuth.Net.Common.IToken)">
            <summary>
            Creates a new OAuth protected request, initialised with previously
            retrieved request and access tokens. 
            </summary>
            <remarks>
            If the access token is valid, the user should not have to intervene
            to authorize the request and the protected resource should be
            fetched immediately.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="requestToken">Request token</param>
            <param name="accessToken">Access token</param>
            <returns>An OAuth protected request for the protected resource,
            initialised with the request token and access token</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri,OAuth.Net.Common.IToken,OAuth.Net.Common.IToken)">
            <summary>
            Creates a new OAuth protected request, initialised with previously
            retrieved request and access tokens, the specified callback  
            </summary>
            <remarks>
            If the access token is valid, the user should not have to intervene
            to authorize the request and the protected resource should be
            fetched immediately.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback uri</param>
            <param name="requestToken">Request token</param>
            <param name="accessToken">Access token</param>
            <returns>An OAuth protected request for the protected resource,
            initialised with the request token and access token</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri,OAuth.Net.Common.IToken,System.String,OAuth.Net.Common.IToken)">
            <summary>
            Creates a new OAuth protected request, initialised with previously
            retrieved request and access tokens, the specified callback  
            </summary>
            <remarks>
            If the access token is valid, the user should not have to intervene
            to authorize the request and the protected resource should be
            fetched immediately.
            </remarks>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback uri</param>
            <param name="requestToken">Request token</param>
            <param name="verifier">Verifier</param>
            <param name="accessToken">Access token</param>
            <returns>An OAuth protected request for the protected resource,
            initialised with the request token and access token</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.String)">
            <summary>
            Creates a new OAuth protected request, using the supplied end user ID
            in combination with the service to create a state key to load and 
            store request state such as tokens. 
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="endUserId">End user ID</param>
            <returns>An OAuth protected request for the protected resource,
            initialised using the configured state store</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.Create(OAuth.Net.Consumer.EndPoint,OAuth.Net.Consumer.OAuthService,System.Uri,System.String)">
            <summary>
            Creates a new OAuth protected request, using the supplied end user ID
            in combination with the service to create a state key to load and 
            store request state such as tokens.
            </summary>
            <param name="resourceEndPoint">Protected resource End Point</param>
            <param name="settings">Service settings</param>
            <param name="callbackUri">Callback URI</param>
            <param name="endUserId">End user ID</param>
            <returns>An OAuth protected request for the protected resource,
            initialised using the configured state store</returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.GetResource">
            <exception cref="T:OAuth.Net.Common.OAuthRequestException">
            <list>
            <item>If the server responds with an OAuthRequestException</item>
            <item>If the server's responds unexpectedly</item>
            <item>If the requests to the server cannot be signed</item>
            </list>
            </exception>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.GetResource(System.Collections.Specialized.NameValueCollection)">
            <param name="parameters">Additional parameters to send with the protected resource request</param>
            <exception cref="T:OAuth.Net.Common.OAuthRequestException">
            <list>
            <item>If the server responds with an OAuthRequestException</item>
            <item>If the server's responds unexpectedly</item>
            <item>If the requests to the server cannot be signed</item>
            </list>
            </exception>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.GetResource(System.String,System.IO.Stream)">
            <param name="contentType">The HTTP content-type of the entity contained in the body</param>
            <param name="bodyStream">The stream of bytes to send in the request to the resource</param>
            <exception cref="T:OAuth.Net.Common.OAuthRequestException">
            <list>
            <item>If the server responds with an OAuthRequestException</item>
            <item>If the server's responds unexpectedly</item>
            <item>If the requests to the server cannot be signed</item>
            </list>
            </exception>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.PrepareProtectedResourceRequest(System.Collections.Specialized.NameValueCollection,System.String,System.IO.Stream)">
            <exception cref="T:OAuth.Net.Common.OAuthRequestException">
            <list>
            <item>If the server responds with an OAuthRequestException</item>
            <item>If the server's responds unexpectedly</item>
            <item>If the requests to the server cannot be signed</item>
            </list>
            </exception>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.DoAuthorizeRequestToken">
            <summary>
            Raises the AuthorizationEventArgs that allows a Consumer to determine 
            if the request should stop and return the RequestToken or 
            continue and request the access token.  This allow the a Consumer desktop 
            app to sleep the thread whilst the consumer goes elsewhere to perform
            the authorization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.DoCollectVerifier">
            <summary>
            Raises the AuthorizationVerificationEventArgs that allows a Consumer to provide
            the verifier received after authorization if it has it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OAuth.Net.Consumer.OAuthRequest.CreateRequest(System.Uri,OAuth.Net.Common.OAuthParameters,System.String,System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="requestUri"></param>
            <param name="authParameters"></param>
            <param name="httpMethod"></param>
            <param name="contentType"></param>
            <param name="bodyStream"></param>
            <returns></returns>
        </member>
        <member name="E:OAuth.Net.Consumer.OAuthRequest.OnBeforeGetRequestToken">
            <summary>
            This event is fired before the request to get a request token is created. You may
            modify the request Uri and HTTP method, as well as add additional request 
            parameters to be sent with the request in the query string or post body.
            </summary>
        </member>
        <member name="E:OAuth.Net.Consumer.OAuthRequest.OnReceiveRequestToken">
            <summary>
            This event is fired after the request token has been received. If an 
            exception occurs receiving the response, this event will not fire.
            </summary>
        </member>
        <member name="E:OAuth.Net.Consumer.OAuthRequest.OnBeforeGetAccessToken">
            <summary>
            This event is fired before the request to get an access token is created. You may
            modify the request Uri and HTTP method.
            </summary>
        </member>
        <member name="E:OAuth.Net.Consumer.OAuthRequest.OnReceiveAccessToken">
            <summary>
            This event is fired after the access token has been received. If an 
            exception occurs receiving the response, this event will not fire.
            </summary>
        </member>
        <member name="E:OAuth.Net.Consumer.OAuthRequest.OnBeforeGetProtectedResource">
            <summary>
            This event is fired before the request to get the protected resource is created.
            You may modify the request Uri and HTTP method, as well as add additional request 
            parameters to be sent with the request in the query string or post body.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.ResourceEndPoint">
            <summary>
            The EndPoint for the protected resource
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.ResourceUri">
            <summary>
            The protected resource Uri
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.Service">
            <summary>
            The OAuth service
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.RequestToken">
            <summary>
            The request token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.AccessToken">
            <summary>
            The access token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.CallbackUrl">
            <summary>
            The URL that the user is redirected to by the Service Provider.  If no Uri is defined 
            the request is defined as out-of-band and the call back has been defined elsewhere or will
            be performed manually.
            <remarks>This value can be dynamically updated during the request by handling the OnBeforeGetRequestToken 
            event in OauthRequest</remarks>
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.RequestTokenVerifier">
            <summary>
            The verifier parameter provided by the service provider 
            that needs to be returned on the request for the access token.
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.VerificationHandler">
            <summary>
            This delegate, if not <c>null</c>, is called before requesting the
            access token to collect the verifier issued by the service provider.
            </summary>
            <remarks>
            <para>
            It is not required to use this mechanism. Instead, you can provide
            the verifier to OAuthRequest.Create.
            </para>
            
            <para>
            If you supply a handler, it should attempt to provide the verifier
            in an application-specific manner when raised.
            </para>
            </remarks>
        </member>
        <member name="P:OAuth.Net.Consumer.OAuthRequest.AuthorizationHandler">
            <summary>
            This delegate, if not <c>null</c>, is called when the request token
            requires authorization.
            </summary>
            <remarks>
            <para>
            It is not required to use this mechanism. Instead, you can inspect
            <see cref="P:OAuth.Net.Consumer.OAuthResponse.HasProtectedResource"/> and direct the
            user to authorize if <c>false</c>.
            </para>
            
            <para>
            If you supply a handler, it should direct the user to authorize in
            an application-specific manner. If this can be done without 
            aborting the current thread, 
            <see cref="P:OAuth.Net.Consumer.AuthorizationEventArgs.ContinueOnReturn"/> should be set
            to <c>true</c> to indicate that the workflow can continue without
            re-submitting the <see cref="T:OAuth.Net.Consumer.OAuthRequest"/>.
            </para>
            
            <para>
            In either mechanism, the authorization URI is built using
            OAuthService.BuildAuthorizationUrl. If additional parameters are
            supplied, these will be included in the authorization URI 
            generated.
            </para>
            </remarks>
        </member>
        <member name="T:OAuth.Net.Consumer.AccessTokenReceivedEventArgs">
            <summary>
            The event arguments sent when an access token is received.
            </summary>
        </member>
        <member name="M:OAuth.Net.Consumer.AccessTokenReceivedEventArgs.#ctor(OAuth.Net.Common.IToken,OAuth.Net.Common.IToken,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates event arguments with the corresponding request token, access token
            and parameter collection.
            </summary>
            <param name="requestToken">Request token</param>
            <param name="accessToken">Access token</param>
            <param name="additionalParameters">Parameter collection</param>
        </member>
        <member name="P:OAuth.Net.Consumer.AccessTokenReceivedEventArgs.RequestToken">
            <summary>
            The request token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.AccessTokenReceivedEventArgs.AccessToken">
            <summary>
            The access token
            </summary>
        </member>
        <member name="P:OAuth.Net.Consumer.AccessTokenReceivedEventArgs.AdditionalParameters">
            <summary>
            Any non-OAuth parameters returned by the service provider
            </summary>
        </member>
    </members>
</doc>
